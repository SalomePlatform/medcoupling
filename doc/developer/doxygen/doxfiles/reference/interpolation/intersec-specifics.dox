/*!
\page intersec-specifics Specificities of 2D and 3D intersectors

All the options described here can be set using the 
\ref MEDCoupling::MEDCouplingRemapper::setOptionInt "MEDCouplingRemapper::setOptionInt",
\ref MEDCoupling::MEDCouplingRemapper::setOptionDouble "MEDCouplingRemapper::setOptionDouble",
and \ref MEDCoupling::MEDCouplingRemapper::setOptionString "MEDCouplingRemapper::setOptionString"
methods.   

\section interpolation2D Special features of 2D intersectors

\subsection InterpKerPlanarIntGenP0P0 P0->P0 : PlanarIntersector.

All the 2D intersectors inherits from INTERP_KERNEL::PlanarIntersector class.

The main task offered by this class is to give the
evaluation of the interpolation of one cell in source mesh with an another
cell in the target mesh.

\subsection InterpKerPlanarIntFeatureP0P0 P0->P0 intersectors features.

When remapping two dimensional fields, areas of intersection between polygonal cells are to be computed. Three algorithms are available:
- Triangulation: decompose each cells into triangles and computes triangle-triangle intersection by determining segment crossings and node inclusions. This algorithm is the fastest if both meshes are made of triangular cells.
- Convex: presume that both meshes are made of convex cells, and performs a direct computation of the intersection nodes between two cells through a sweep line algorithm (see  F. Preparata and M. Shamos, 1985 in \ref references).
For the moment, it is only possible to remap two dimensional fields on
meshes with mixed triangular and quadrangular elements.
- Geometric2D: Any type of 2D cells (linear, quadratic, convex-polygons,
non-convex polygons) is supported by this algorithm. Due to its
flexibility this algorithm is slower than the other.
- \anchor pointlocator PointLocator: This is a \b non \b conservative interpolator. For P0P0, it
locates the barycenter of target cell in the source cells. For P1P0, it
locates barycenter of target cell and compute \ref barycoords "barycentric coordinates"
in source cell (Works only with Triangulation). For P0P1 locate target nodes
in source cells. For P1P1 compute for each target node its barycentric coordinates in source cell.

The following options are available for the 2D intersection computations:
 * <TABLE BORDER=1 >
 * <TR><TD>Option</TD><TD>Description</TD><TD> Admitted values</TD><TD>Default</TD></TR>
 * <TR><TD> Intersection_type</TD><TD>Specifies the algorithm to be
 * used in the computation of the cell-cell intersections</TD><TD>
 * Triangulation, Convex, \ref interpkernelGeo2D "Geometric2D", PointLocator</TD><TD> Triangulation </TD></TR>
 * <TR><TD> Precision </TD><TD>Accuracy of the computations is precision times the characteristic size of the meshes </TD><TD>  positive real numbers</TD><TD> 1.0E-12 </TD></TR>
 * <TR><TD>PrintLevel </TD><TD>Level of verboseness during the computations </TD><TD> 0, 1, 2, 3 </TD><TD>0 </TD></TR>
 *</TABLE>

\section interpolation3Dsurf Special features of 3D surface intersectors

When remapping a three dimensional surfaces, one should give a meaning to the area of intersection between two three-dimensional non coplanar polygons. A projection phase is thus necessary to have both polygons on the same plane. Care must be taken when defining this projection to avoid non conservative remappings. After the projection step, the source and target cells lie in the same plane and the same algorithms as for 2D remapping can be employed.
For the moment, it is only possible to remap fields on  three dimension surface meshes with mixed triangular and quadrangular elements.
Similar options as for the 2D remapping are available, plus some additional options specific to 3D surface remapping:

 * <TABLE BORDER=1 >
 * <TR><TD>Option</TD><TD>Description</TD><TD> Admitted values</TD><TD>Default</TD></TR>
 * <TR><TD> MedianPlane </TD><TD>Position of the median plane where both cells will be projected</TD><TD> real numbers between 0 and 1 </TD><TD> 0.5 </TD></TR>
 * <TR><TD> Precision </TD><TD>Accuracy of the computations is
 * precision times the characteristic size of the meshes </TD><TD>
 * positive real numbers </TD><TD> 1.E-12 </TD></TR>
 * <TR><TD> Orientation </TD><TD>Specifies orientation to take into account. If -1 only negative intersection area are taken into account.  If 1 only positive intersection
 *  area are taken into account. If 0 intersection area are always taken into account. If 2 intersection area are always taken into account (as 0) difference is that absolute value</TD><TD> -1,0,1,2 </TD><TD> 0 </TD></TR>
 * <TR><TD>DoRotate </TD><TD>Performs a rotation of the coordinate
 system such that the median plane is the Oxy plane </TD><TD>
 boolean true or false </TD><TD> true </TD></TR>
 * <TR><TD>BoundingBoxAdjustment</TD><TD>When detecting an intersection between bounding boxes, the bounding are expanded by a factor (1+BoundingBoxAdjustment). It is particularly useful when detecting intersections for 3D surfaces for which the bounding boxes might not actually intersect. </TD><TD> positive real numbers </TD><TD> 1.e-4 </TD></TR>
 * <TR><TD>BoundingBoxAdjustmentAbs</TD><TD>When detecting an intersection between bounding boxes, the bounding are expanded uniformly in the 3 dimension of space with the absolute value BoundingBoxAdjustmentAbs. It is particularly useful when detecting intersections for 3D surfaces for which the bounding boxes might not actually intersect. </TD><TD> positive real numbers </TD><TD> 0. </TD></TR>
 * <TR><TD>MaxDistance3DSurfIntersect</TD><TD>Before attempting an intersection in 3D surf test the distance D between fast barycenter of target cell and medium source plane P. If option < 0. no interpretation of D is done. If option > 0. then if D<option intersection is taken into account and if D>option intersection is equal to 0. . This option exists in order to have an iso behaviour whatever the angle of plane P and OXY OYZ OXZ contrary to BBoxAdjestments options.  </TD><TD> real numbers </TD><TD> -1. </TD></TR>
 *</TABLE>

Note that choosing the Triangulation Intersection_type necessarily set the DoRotate option to true.

\section interpolation3D Special features of 3D volumes intersectors

\subsection InterpKer3DIntGenP0P0 P0->P0 : TargetIntersector

Unlike \ref InterpKerPlanarIntGenP0P0 "PlanarIntersector phylosophy"
this intersector is slightly different. Here for the moment
there is one instance per pair of meshes \b and target element. See INTERP_KERNEL::TargetIntersector for more details.

\subsection InterpKer3DIntFeatureP0P0 P0->P0 intersectors features.

When remapping three dimensional fields, volumes of intersection
between polyhedral cells are to be computed.
Two methods are available :
- Triangulation : the method of Jeffrey Grandy, 1999 (see \ref references)
to intersect arbitrary polyhedra. The basic algorithm computes the
intersection of a tetrahedron with an arbitrary (possibly non convex)
polyhedron. Using splitting techniques, it is possible to transform
the problem of computing the intersection between two general
polyhedra into several tetrahedron-polyhedron intersection
calculations. For the moment it is only possible to remap fields on
meshes having mixed tetrahedral and hexahedral cells. When using a
mesh with hexahedral cells, several splitting techniques may be
employed depending mainly on whether the faces are planar or not. The
following options are available for the splitting:
- PointLocator : \b non \b conservative intersector based on the same
principle than described in 2D.

 * <TABLE BORDER=1 >
 * <TR><TD>Option</TD><TD>Description</TD><TD> Admitted values</TD><TD>Default</TD></TR>
 * <TR><TD> Intersection_type</TD><TD>Specifies the algorithm to be
 * used in the computation of the cell-cell intersections</TD><TD>
 * Triangulation, PointLocator</TD><TD> Triangulation </TD></TR>
 * <TR><TD> SplittingPolicy </TD><TD> Way in which the hexahedra are
 * split into tetrahedra (only if Intersection_type==Triangulation) </TD><TD> PLANAR_FACE_5,  PLANAR_FACE_6, GENERAL_24, GENERAL_48</TD><TD> PLANAR_FACE_5 </TD></TR>
 * <TR><TD>PrintLevel </TD><TD>Level of verboseness during the computations </TD><TD> 1, 2, 3, 4, 5 </TD><TD>0 </TD></TR>
 * </TABLE>

Note that a SplittingPolicy values starting with the word "PLANAR" presume that each face is to be considered planar, while the SplittingPolicy values starting with the word GENERAL does not. The integer at the end gives the number of tetrahedra that result from the split.
 Consider an hexahedron with planar faces and nodes numbered according to the following picture:
\verbatim

              7 ------ 6
             /|       /|
            / |      / |
           3 ------ 2  |
           |  |     |  |
           |  |     |  |
           |  4-----|- 5
           | /      | /
           0 ------ 1
\endverbatim
The use of the SPLIT_NODES_5 splitting policy would lead to a 5 tetrahedra decomposition as follows :
\verbatim
  0, 1, 5, 2
  0, 4, 5, 7
  0, 3, 7, 2
  5, 6, 7, 2
  0, 2, 5, 7
\endverbatim
The use of the SPLIT_NODES_6 splitting policy would lead to a 6 tetrahedra decomposition as follows :
\verbatim
  0, 1, 5, 6
  0, 2, 1, 6
  0, 5, 4, 6
  0, 4, 7, 6
  0, 3, 2, 6
  0, 7, 3, 6
\endverbatim


*/
