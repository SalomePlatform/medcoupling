#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 218
\textclass report
\begin_preamble
% Packages
%%\usepackage[french]{babel}
%\usepackage[T1]{fontenc}
%\usepackage{epsf}
%\usepackage[dvips]{graphicx}
%\usepackage{fancyhdr}
%\usepackage{pslatex}

\usepackage[dvips,all,light]{draftcopy}

\usepackage{verbatim}

%  ____________________________________________________________________________
% |                                                                            |
% |                             MISE EN PAGE                                   |
% |____________________________________________________________________________|

\draftcopyName{Projet}{200}

\setlength{\oddsidemargin}{0cm}
\setlength{\marginparsep}{0cm}
\setlength{\marginparwidth}{0cm}

\setlength{\textwidth}{15cm}

\setlength{\topmargin}{0cm}
\setlength{\headheight}{0cm}
\setlength{\headsep}{0cm}

\setlength{\textheight}{23cm}

%  ____________________________________________________________________________
% |                                                                            |
% |                             COMMANDES UTILISATEUR                          |
% |____________________________________________________________________________|

\newcommand{\method}[1]{method \mbox{\textbf{#1}}}

\newcommand{\myref}[1]{\ref{#1}, page \pageref{#1}}

\newcommand{\fileCxx}[1]{
  \subsection{Full C++ example~: }
  \label{#1}
  \verbatiminput{#1}
}

\newcommand{\filePython}[1]{
  \subsection{Full Python example~: }
  \label{#1}
  \verbatiminput{#1}
}

%  ____________________________________________________________________________
% |                                                                            |
% |                              LE DOCUMENT                                   |
% |____________________________________________________________________________|
%
\title{User's Guide Of Med Memory}
\author{Patrick GOLDBRONN \and Eric Fayolle \and Nadir Bouhamou}

%  ____________________________________________________________________________
% |                                                                            |
% |                              DEBUT DU DOCUMENT                             |
% |____________________________________________________________________________|
%
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize 11
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Standard


\latex latex 

\backslash 
sloppy
\layout Standard


\latex latex 

\backslash 
cleardoublepage
\newline 

\latex default 

\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Chapter

Convention
\layout Itemize

All numbering begin at one (take care of array index !) ; 
\layout Itemize

When you get a C type array with a 
\family typewriter 
get...

\family default 
 method, you must not replace some value of it.
 Access is in read only.
 Other use may product an impredicable result.
 To modify a such array use method 
\family typewriter 
set...
\family default 
.
 
\layout Itemize

Difference between local and global number\SpecialChar ~
: when we talk about an element
 number, we could see 
\begin_inset Formula \( i^{th} \)
\end_inset 

 quadrangle (
\begin_inset Formula \( i^{th} \)
\end_inset 

 in quadrangles array\SpecialChar ~
: local numbering) or 
\begin_inset Formula \( j^{th} \)
\end_inset 

 element (
\begin_inset Formula \( j^{th} \)
\end_inset 

 in all elements array\SpecialChar ~
: global numbering).
 This two numbering are equivalent only if we have one geometric type.
\layout Chapter

How to use MESH object
\layout Section

General Information
\layout Standard

We could get some general information about a MESH object such as\SpecialChar ~
: 
\layout Itemize

name (
\latex latex 

\backslash 
method{getName}
\latex default 
) 
\layout Itemize

a description (
\latex latex 

\backslash 
method{getDescription}
\latex default 
) 
\layout Itemize

the space dimension (
\latex latex 

\backslash 
method{getSpaceDimension}
\latex default 
) 
\layout Itemize

the mesh dimension (
\latex latex 

\backslash 
method{getMeshDimension}
\latex default 
) 
\layout Standard


\latex latex 

\backslash 
fileCxx{MESHgeneral.cxx}

\backslash 
filePython{MESHgeneral.py}
\layout Section

Information about nodes
\layout Enumerate

I want to get the number of nodes\SpecialChar ~
: Realy simple, use 
\latex latex 

\backslash 
method{getNumberOfNodes}
\latex default 
.
 
\layout Enumerate

I want to get the coordinates components names\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getCoordinatesNames}
\latex default 
 which return a string array (one string for each space dimension) 
\layout Enumerate

I want to get the coordinates components units\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getCoordinatesUnits}
\latex default 
 which return a string array (one string for each space dimension) 
\layout Enumerate

I want to get the coordinates system\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getCoordinatesSystem}
\latex default 
 which return a string (
\latex latex 

\backslash 
verb+CARTESIAN+
\latex default 
, 
\latex latex 

\backslash 
verb+CYLINDRICAL+
\latex default 
 or 
\latex latex 

\backslash 
verb+SPHERICAL+
\latex default 
).
 
\layout Enumerate

I want to get the nodes coordinates\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getCoordinates}
\latex default 
 which return a pointer to the coordinates array where values are interlace
 or no.
 
\series bold 
Warning\SpecialChar ~
:
\begin_deeper 
\layout Itemize

When we get coordinates in 
\latex latex 

\backslash 
verb+MED_NO_INTERLACE+
\latex default 
 mode, we get an array where values are ordered like (
\latex latex 

\backslash 
verb+X1,X2,X..., Y1,Y..., Z1,Z...+
\latex default 
).
 
\layout Itemize

When we get coordinates in 
\latex latex 

\backslash 
verb+MED_FULL_INTERLACE+
\latex default 
 mode, we get an array where values are ordered like (
\latex latex 

\backslash 
verb+X1,Y1,Z1, X2,Y2,Z2, ...+
\latex default 
).
 
\end_deeper 
\layout Enumerate

I want to get one particular value of coordinate\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getCoordinate}
\latex default 
 which return the value of 
\begin_inset Formula \( i^{th} \)
\end_inset 

 node and 
\begin_inset Formula \( j^{th} \)
\end_inset 

 axis.
\layout Standard


\latex latex 

\backslash 
fileCxx{MESHcoordinates.cxx}

\backslash 
filePython{MESHcoordinates.py}
\layout Section

Information about cells
\layout Enumerate

I want to get the number of geometric type for a mesh entity\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getNumberOfTypes}
\begin_deeper 
\layout Standard


\series bold 
C++ Example\SpecialChar ~
:
\layout Standard


\latex latex 

\backslash 
verb+int NumberOfCellsTypes = myMesh.getNumberOfTypes(MED_CELL);+
\end_deeper 
\layout Enumerate

I want to get all geometric type for a mesh entity\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getTypes}
\latex default 
 to get an array of 
\latex latex 

\backslash 
verb+medGeometryElement+
\latex default 
 (to use directly in others methods) or 
\latex latex 

\backslash 
method{getCellsTypes}
\latex default 
 to get an array of 
\latex latex 

\backslash 
verb+CELLMODEL+
\latex default 
 (to ask mode information\SpecialChar ~
: see CellModel) .
\begin_deeper 
\layout Standard


\series bold 
C++ Example\SpecialChar ~
:
\layout Standard


\latex latex 

\backslash 
verb+medGeometryElement * Types = myMesh.getTypes(MED_CELL);+
\layout Standard


\latex latex 

\backslash 
verb+CELLMODEL * CellsTypes = myMesh.getCellsTypes(MED_CELL);+
\layout Standard

(each arrays are size 
\latex latex 

\backslash 
verb+NumberOfCellsTypes+
\latex default 
)
\end_deeper 
\layout Enumerate

I want to get the number of cells\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getNumberOfElements}
\latex default 
 which return this information.
 You must give the mesh entity (
\latex latex 

\backslash 
verb+MED_CELL+
\latex default 
, 
\latex latex 

\backslash 
verb+MED_FACE+
\latex default 
, 
\latex latex 

\backslash 
verb+MED_EDGE+
\latex default 
 or 
\latex latex 

\backslash 
verb+MED_NODE+
\latex default 
) and a geometric type of this entity.
\begin_deeper 
\layout Standard


\series bold 
C++ Example\SpecialChar ~
:
\layout Standard


\latex latex 

\backslash 
verb+int NumberOfTriangle = myMesh.getNumberOfElements(MED_FACE,MED_TRIA3);+
\layout Standard


\latex latex 

\backslash 
verb+int NumberOfFace = myMesh.getNumberOfElements(MED_FACE,MED_ALL_ELEMENT);+
\end_deeper 
\layout Enumerate

I want to get the geometric type of one element\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getElementType}
\latex default 
 which return a 
\latex latex 

\backslash 
verb+medGeometryElement+
\latex default 
.
\begin_deeper 
\layout Standard


\series bold 
C++ Example\SpecialChar ~
:
\layout Standard


\latex latex 

\backslash 
verb+medGeometryElement myType = myMesh.getElementType(MED_FACE,10);+
\layout Standard

Return the 
\latex latex 

\backslash 
verb+medGeometryElement+
\latex default 
 of 
\begin_inset Formula \( 10^{th} \)
\end_inset 

 face.
\end_deeper 
\layout Enumerate

I want to get a connectivity\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getConnectivity}
\latex default 
 which return an array with connectivity values.
\begin_deeper 
\layout Standard


\begin_inset LatexCommand \label{getConnectivity}

\end_inset 


\layout Standard


\series bold 
C++ Example\SpecialChar ~
:
\layout Standard


\latex latex 

\backslash 
begin{verbatim}
\newline 
int NumberOfTetrahedron = myMesh.getNumberOfElements(MED_CELL,MED_TETRA4);
\newline 
int * TetrahedronConnectivity =
\newline 
         myMesh.getConnectivity(MED_FULL_ENTERLACE,
\newline 
                                MED_NODAL,
\newline 
                                MED_CELL,
\newline 
                                MED_TETRA4);
\newline 

\backslash 
end{verbatim} 
\backslash 
verb+TetrahedronConnectivity+
\latex default 
 contain nodal connectivity of tetrahedron in mesh.
 It is arranged in full enterlace mode and its size is 
\latex latex 

\backslash 
verb+NumberOfTetrahedron x 4+
\latex default 
.
\layout Standard

If you want to get connectivity of all elements (with 
\latex latex 

\backslash 
verb+Type=MED_ALL_ELEMENTS+
\latex default 
), you must use the index array (return by 
\latex latex 

\backslash 
method{getConnectivityIndex}
\latex default 
) to get connectivity for each elements (see example 
\latex latex 

\backslash 
myref{MESHconnectivities.cxx}
\latex default 
).
\end_deeper 
\layout Enumerate

I want to get an element number from a connectivity\SpecialChar ~
: use 
\latex latex 

\backslash 
method{getElementNumber}
\latex default 
 which return the global number of a given connectivity.
\begin_deeper 
\layout Standard


\series bold 
C++ Example\SpecialChar ~
:
\layout Standard


\latex latex 

\backslash 
verb+int * myElementConnectivity = {2,10,12,14};+
\layout Standard


\latex latex 

\backslash 
verb+int myNumber = myMesh.getElementNumber(MED_NODAL,MED_CELL,myElementConnectiv
ity);+
\end_deeper 
\layout Standard


\latex latex 

\backslash 
fileCxx{MESHconnectivities.cxx}

\backslash 
filePyhton{MESHconnectivities.py}
\layout Chapter

How to use SUPPORT object
\layout Section

Create a SUPPORT object
\layout Standard


\begin_inset LatexCommand \label{CreateSupport}

\end_inset 


\layout Standard

To create a SUPPORT object, you must give : 
\layout Itemize

a reference to a MESH object 
\layout Itemize

its name 
\layout Itemize

on which mesh entity it apply to 
\layout Standard


\series bold 
C++ example\SpecialChar ~
:
\layout Standard


\latex latex 

\backslash 
verb+SUPPORT mySupport(myMesh,''support sur toute les faces'',MED_FACE)
 ;+
\latex default 
 By default, this support is defined on all element of the given entity.
\layout Standard

If you want a restricted SUPPORT, you must add manualy information about
 what do you want\SpecialChar ~
: 
\layout Itemize

is not on all elements\SpecialChar ~
: 
\latex latex 

\backslash 
verb+mySupport.setAll(false);+
\layout Itemize

on how many geometric type\SpecialChar ~
:
\newline 

\latex latex 
 
\backslash 
verb+mySupport.setNumberOfGeometricType(myNumberOfGeometricType);+
\layout Itemize

on which geometric type\SpecialChar ~
:
\newline 

\latex latex 
 
\backslash 
verb+mySupport.setGeometricType(myGeometricType);+
\layout Itemize

Temporary : the Gauss point number for each geometric type\SpecialChar ~
:
\newline 

\latex latex 
 
\backslash 
verb+mySupport.setNumberOfGaussPoint(myNumberOfGaussPoint);+
\layout Itemize

the number of elements for each geometric type\SpecialChar ~
:
\newline 

\latex latex 
 
\backslash 
verb+mySupport.setNumberOfEntities(myNumberOfEntities);+
\layout Itemize

the total number of elements\SpecialChar ~
:
\newline 

\latex latex 
 
\backslash 
verb+mySupport.setTotalNumberOfEntities(myTotalNumberOfEntities);+
\layout Itemize

the array which contains elements for each geometric type\SpecialChar ~
:
\newline 

\latex latex 
 
\backslash 
verb+mySupport.setNumber(myNumber);+
\layout Standard

You could also use 
\latex latex 

\backslash 
method{setpartial}
\latex default 
 which set all you need.
\layout Section

Use a SUPPORT object
\layout Standard

You could get all basic information (as you set them in 
\latex latex 

\backslash 
myref{CreateSupport}
\latex default 
)\SpecialChar ~
: 
\layout Itemize


\latex latex 

\backslash 
verb+getName()+
\layout Itemize


\latex latex 

\backslash 
verb+getDescription()+
\layout Itemize


\latex latex 

\backslash 
verb+getMesh()+
\layout Itemize


\latex latex 

\backslash 
verb+getEntity()+
\layout Itemize


\latex latex 

\backslash 
verb+isOnAllElements()+
\layout Itemize


\latex latex 

\backslash 
verb+getNumberOfTypes()+
\layout Itemize


\latex latex 

\backslash 
verb+getTypes()+
\layout Itemize


\latex latex 

\backslash 
verb+getNumberOfGaussPoint()+
\layout Itemize


\latex latex 

\backslash 
verb+getNumberOfGaussPoint(myGeometricType)+
\layout Itemize


\latex latex 

\backslash 
verb+getGeometricTypeNumber()+
\layout Itemize


\latex latex 

\backslash 
verb+getNumberOfElements(myGeometricType)+
\layout Itemize


\latex latex 

\backslash 
verb+getNumber(myGeometricType)+
\layout Itemize


\latex latex 

\backslash 
verb+getNumberIndex()+
\layout Standard

For details about this methods, see the reference manual 
\begin_inset LatexCommand \ref{RefManual}

\end_inset 

.
\layout Standard

The use of 
\latex latex 

\backslash 
method{getNumber}
\latex default 
 and 
\latex latex 

\backslash 
method{getNumberIndex}
\latex default 
 are the same as 
\latex latex 

\backslash 
method{getConnectivity}
\latex default 
 and 
\latex latex 

\backslash 
method{getConnectivityIndex}
\latex default 
 (see item 
\latex latex 

\backslash 
myref{getConnectivity}
\layout Standard

There is another particular method to blend another SUPPORT object into
 it.
\layout Standard

For exemple in C++ : 
\latex latex 

\backslash 
begin{verbatim}
\newline 
SUPPORT mySupport ;
\newline 
SUPPORT myOtherSupport ;
\newline 
...
\newline 
mySupport.blending(myOtherSupport) ;
\newline 

\backslash 
end{verbatim}
\layout Standard


\latex latex 

\backslash 
verb+mySupport+
\latex default 
 contain now all elements defined originally in it, more those defined in
 
\latex latex 

\backslash 
verb+myOtherSupport+
\latex default 
.
\layout Section

Case of FAMILY object
\layout Section

Case of GROUP object
\layout Chapter

How to use Field
\layout Standard


\latex latex 

\backslash 
newpage
\newline 
%
\backslash 
thebibliography{biblio}
\layout Standard
\bibitem {RefManual}

Reference Manual\SpecialChar ~
: 
\latex latex 
http://www-drn2.cea.fr/MED/MEDMEM/DOC/html/index.html
\layout Chapter

Using drivers
\layout Standard

The generic driver mecanism gives users the possibility to write/read the
 content of an object according to a specified file format.
 The semantic remains the same whatever the object is (MESH, FIELD, MED).
 By the way it allows using several file formats for writting an object.
\layout Section

Invoking a driver
\layout Subsection

Invoking a driver at creation object time
\layout Standard

This is the simplest way of invoking a driver.
 The driver parameters are given to the constructor of the object.
  Except for the MED object, this way of invoking a driver assume you know
 exactly the name of the MESH/FIELD you want read from a file <fileName>
 of type <driverType>.
\layout Standard

ex 1.1 : For a FIELD object, invoking FIELD<double> myField(MED_DRIVER,fileName,f
ieldName) create a FIELD object and a driver which loads the mesh <fieldName>
 from the MED file <fileName> (Not implemented yet !).
\layout Standard

ex 1.2 : To remove the default driver previously created myField->rmDriver();
\layout Standard

ex 2 : For a MESH object, invoking MESH myMesh(MED_DRIVER,fileName,meshName)
 create a MESH object and a driver which loads the mesh <meshName> from
 the MED file <fileName>.
\layout Standard

ex 3 : For a MED object, invoking MED myMed(MED_DRIVER,fileName) create
 a MED object to explore the MED file <fileName>.
\layout Standard

rem 1 : ex1 is equivalent to 
\begin_inset LatexCommand \ref{sec:invoking_a_driver_from_the_std_drv_method}

\end_inset 

 ex1.
\layout Standard

rem 2 : Since the driver has read the object, the associated file is closed.
 You can reread the object with the default driver by calling the read()
 method : myObject.read().
\layout Standard


\latex latex 

\backslash 
fileCxx{MEDMEM_InvokingDriverAtObjectCreationTime.cxx}
\layout Subsection

Invoking a driver from the standard driver method of an object
\begin_inset LatexCommand \label{sec:invoking_a_driver_from_the_std_drv_method}

\end_inset 


\layout Standard

This way of invoking a driver give the possiblility to add several drivers
 to an exiting object.
\layout Standard

ex1 : First we create a FIELD without any driver FIELD<double>\SpecialChar ~
*\SpecialChar ~
myField1\SpecialChar ~
=\SpecialChar ~
new\SpecialChar ~
FIELD
<double>; then we add a driver with int myDriver1 = myField1->addDriver(driverTy
pe1, fileName1, fieldName1); for reading <fieldName1> from file <fileName1>
 with myField1->read(myDriver1);
\layout Standard

ex2 : We add a new driver of type <driverType2> int myDriver2 = myField1->addDri
ver(driverType2, fileName2,fieldName2); in order to write myField1 in file
 <fileName2> with <fieldName2> name using command myField1->write(myDriver2);
\layout Standard

rem 1 : Files are openned then closed each time you call read() or write()
 methods.
\layout Standard

rem 2 : If you use more than a driver you need to keep the driver handlers
 (myDriverI ).
\layout Standard


\latex latex 

\backslash 
fileCxx{MEDMEM_InvokingDriverFromStandardObjectMethod.cxx}
\layout Subsection

Invoking a driver and attaching it to an existing object
\layout Standard

The methods exposed in the two previous sections always create drivers in
 read/write access mode.
 Another way of creating a driver is to create a driver with a specific
 access mode.
\layout Standard

ex1 : First we create a FIELD without any driver FIELD<double>\SpecialChar ~
*\SpecialChar ~
myField1\SpecialChar ~
=\SpecialChar ~
new
 FIELD<double>(); then we create a read-only driver MED_FIELD_RDONLY_DRIVER<doub
le>\SpecialChar ~
myRdOnlyDriver(fileName1,myField1); and attached it to myField1.
 Finally you must set the fieldName1 you want to acess in fileName1 with
 myRdOnlyDriver->setFieldName(fieldName1); in order to read the field with
 myRdOnlyDriver->open(); myRdOnlyDriver->read();
\layout Standard

Don't forget to close the file with myRdOnlyDriver->close().
\layout Standard

ToDo : By now when you create such specific drivers, the object doesn't
 know anything about it.
 
\layout Standard


\latex latex 

\backslash 
fileCxx{MEDMEM_InvokingDriverByAttachingItToAnObject.cxx}
\layout Section

Using the MED driver
\layout Standard

The MED object provides the ability of :
\layout Enumerate
\noindent 
Obtainning a reference on the whole structure contained in a file.
\layout Enumerate

Obtainning the list of all the Meshes/Fields names contained in a file.
\layout Enumerate

Obtainning a Mesh/Field reference using a name.
\layout Enumerate

Writting a whole set of independent objects with a simple command.
 
\layout Subsection

Exploring files
\layout Standard

In this first use case the user wants to explore the meshes & fields containned
 within a file <filename> of type given by the <drivertype> parameter.
\layout Standard

ex 1 : Calling MED * myMed = new MED(driverType1, fileName1); create a MED
 object which open fileName1, read all MESHes/FIELDs relations then close
 the file.
 
\layout Standard

This is equivalent to MED\SpecialChar ~
*\SpecialChar ~
myMed\SpecialChar ~
=\SpecialChar ~
new\SpecialChar ~
MED(); myDriver\SpecialChar ~
=\SpecialChar ~
myMed->addDriver(driverType1,
fileName1); myMed->readFileStruct(myDriver); 
\layout Standard

ex 2 : To get the list of meshNames from a MED object, first ask the object
 how many meshes it had by calling int numberOfMeshes\SpecialChar ~
=\SpecialChar ~
myMed->getNumberOfMeshes()
; then get the list with myMeshNames\SpecialChar ~
=\SpecialChar ~
new string[getMeshNames]; myMed->getMeshNam
es(myMeshNames).
 
\layout Standard

Note you can also use the deque<string> getMeshNames() method.
 
\layout Standard

ex 3 : To get a list of fieldNames from a MED object, first ask the object
 how many fields it had by calling int numberOfFields\SpecialChar ~
=\SpecialChar ~
myMed->getNumberOfFields()
; then get the list with myFieldNames\SpecialChar ~
=\SpecialChar ~
new string[getFieldNames]; myMed->getField
Names(myFieldNames).
\layout Standard

ex 4 :To get a particular MESH use MESH * myMesh1 = myMED->getMesh(myMeshNames[0
]) 
\layout Standard

ex 5 :To get a particular FIELD you first need to know what (time step,
 iteration number) list is used by calling deque<DT_IT_>\SpecialChar ~
myField1DtIt\SpecialChar ~
=\SpecialChar ~
myMed->getF
ieldIteration(FieldName[0]) ; then you can ask for getting a specific FIELD
 with FIELD\SpecialChar ~
*\SpecialChar ~
myField1\SpecialChar ~
=\SpecialChar ~
myMED->getField(myFieldNames[0],myField1DtIt[0].dt,myField1D
tIt[0].it).
\layout Standard

ex2 : To write the whole content of a MED object first add a driver myDriver2\SpecialChar ~
=\SpecialChar ~
my
Med.addDriver(driverType2,\SpecialChar ~
fileName2); then ask for writing the object myMed->writ
e(myDriver2); (not implemented yet !) 
\layout Standard

You can remove the driver with myMed->rmDriver(myDriver2);
\layout Standard

rem 1 : It is possible to use multiple drivers to read a set of FIELDs /
 MESHes from various file formats and writing the whole set through a specific
 write.(not implemented yet !) 
\layout Subsubsection

Adding existing MESHes/FIELDs objects
\layout Standard

Not yet implemented.
\the_end
