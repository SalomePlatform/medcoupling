
/*!

\page MEDCouplingArrayPage MEDCoupling Arrays

[TOC]

\section MEDCouplingArrayIntro Introduction

One of the most basic concept mainly used all over MEDCoupling is
MEDCoupling array.

This concept is used all over
\ref medcoupling "MEDCoupling", \ref paramedmem "ParaMEDMEM", \ref medloader "MEDLoader" modules so it should be correctly
handled to play well with \ref MEDCouplingMeshesPage "Meshes" and \ref MEDCouplingFieldsPage "Fields".

\ref ParaMEDMEM::DataArray "DataArrays" are the atomic element of potentially heavy in memory objects in \ref medcoupling "MEDCoupling", \ref paramedmem "ParaMEDMEM" and \ref medloader "MEDLoader".

There are for the moment two types of arrays :
 - double precision float (64 bits) array incarnated by \ref ParaMEDMEM::DataArrayDouble "DataArrayDouble class".
 - signed integer (32 bits) array incarnated by \ref ParaMEDMEM::DataArrayInt "DataArrayInt class".

\ref ParaMEDMEM::DataArrayDouble "DataArrayDouble" and \ref ParaMEDMEM::DataArrayInt "DataArrayInt" classes inherits from
\ref ParaMEDMEM::DataArray "DataArray" \b non \b instantiable \b class that factorizes some common methods of inherited instantiable classes.

In the rest of the documentation \b DataArray will be used for both \ref ParaMEDMEM::DataArrayDouble "DataArrayDouble" and \ref ParaMEDMEM::DataArrayInt "DataArrayInt".

\section MEDCouplingArrayBasics Basics concepts of the DataArrays.

It will be presented in this section common concept shared by the two classes to \ref ParaMEDMEM::DataArrayDouble "DataArrayDouble" and \ref ParaMEDMEM::DataArrayInt "DataArrayInt".

\subsection MEDCouplingArrayBasicsName Name

A \ref ParaMEDMEM::DataArray "DataArray" instance has an attribute **name**.

**name** is particularly useful for \ref ParaMEDMEM::DataArray "DataArray" representing profiles, families, groups, fields in MEDLoader.
But excepted these useful usecases, **name** attribute is often ignored when \ref ParaMEDMEM::DataArray "DataArrays" are aggregated (field array, connectivity, coordinates) in a bigger object.
Whatever the usage of the **name** attribute of \ref ParaMEDMEM::DataArray "DataArrays", all methods in ParaMEDMEM::DataArrayDouble and ParaMEDMEM::DataArrayInt class deal with **name** as they do for components names.

\subsection MEDCouplingArrayBasicsTuplesAndCompo Raw data, tuples and components of DataArrays.

The main goal of \ref ParaMEDMEM::DataArray "DataArray" is to store contiguous vector of atomical elements with same basic datatype (signed integers, double precision...). This vector of atomical elements is called **raw data** of \ref ParaMEDMEM::DataArray "DataArray".

The size of this vector of data is called <em>"number of elements"</em>. So the number of bytes stored by a \ref ParaMEDMEM::DataArray "DataArray" instance, is equal to
the  product of the __number of elements__ * __constant size of DataType__ .

As \ref ParaMEDMEM::DataArray "DataArray" instances are designed to store vector fields, tensor fields, coordinate of nodes, the notion of _components_ has been added.

So, \ref ParaMEDMEM::DataArray "DataArrays" have an additional attribute that is number of components that represent the size of a contiguous set of atomical elements.
The vector of atomical elements stored into \ref ParaMEDMEM::DataArray "DataArrays" are grouped in contiguous memory set of atomical elements having each same size.

The contiguous set of atomical elements is called **tuple**. And each **tuple** stored in raw data, has a length exactly equal to the number of components of
\ref ParaMEDMEM::DataArray "DataArray" storing it.

Thus :

\f[
 N_{elements}=N_{tuples}*N_{components}.
\f]

\f[
 N_{bytes}=N_{elements}*sizeof(DataType)=N_{tuples}*N_{components}*sizeof(DataType).
\f]

In other words, **raw data** of \ref ParaMEDMEM::DataArray "DataArrays" can be seen as a dense matrix, whose number of components would be the row size and number of tuples
would be the column size. In this point of view of \ref ParaMEDMEM::DataArray "DataArrays" a **tuple** is represented by the corresponding row in the dense matrix.

Typically in the **raw data** of  \ref ParaMEDMEM::DataArray "DataArrays" **number of tuples** is highly bigger than **number of components** !

To finish, raw data is stored tuples by tuples, in another words, in **full interlace mode**, which is the natural storage strategy in C/C++ world.

For example, let's consider a DataArray having 3 components (called *x* for the first component, *y* for the second, and *z* for the third) and composed by 5 tuples.
\n The *raw data* of the DataAarray instance will be organized in memory like that : \f$ x_0,y_0,z_0,x_1,y_1,z_1,x_2,y_2,z_2,x_3,y_3,z_3,x_4,y_4,z_4 \f$.


\subsection MEDCouplingArrayBasicsCompoName Information on components name.

As seen in the sub section above, a \ref ParaMEDMEM::DataArray "DataArray" instance has a defined number of components.

There is an information attached to each of these components constituting the \ref ParaMEDMEM::DataArray "DataArray".

This information is concretely a string of characters that allows, if needed, to give information about the corresponding component.

The format chosen in **MEDCoupling** for information on is "MY_COMPO_INFO [MYUNIT]". If needed, the unit attached to the component
should be put between "[" and "]" after the information of the components after one space character.

\subsection MEDCouplingArrayBasicsTimeLabel DataArrays and TimeLabel.

\ref ParaMEDMEM::DataArray "DataArrays instances" can consume big amount of data in memory so they inherit from \ref MEDCouplingTimeLabelPage "TimeLabel".
So in C++ it is a good practice to use :
- \c getConstPointer method in readonly access.
- \c getPointer method only if write is needed.

If the user in C++ or Python wants to modify intensively its **big** \ref ParaMEDMEM::DataArray "DataArray" instance **not** using raw data pointer it is better to invoke
\c setIJSilent just after invocation of \c declareAsNew instead of calling \c setIJ method that will increment time label of \ref ParaMEDMEM::DataArray "DataArray" instance
on each call.

\c setIJ method usage should be reduced to little modification sessions.

\section MEDCouplingArrayBuildFromScratch Building an array from scratch

Here is a description of typical usages of \ref ParaMEDMEM::DataArrayDouble "MEDCoupling arrays".

\ref MEDCouplingArraySteps1 "Here is a C++ example."<br>
\ref MEDCouplingArraySteps0 "Here is a Python example."<br>


\section MEDCouplingArrayBasicsCopy Copy DataArrays.

As \ref ParaMEDMEM::DataArray "DataArrays" are the atomic entity of potentially big memory objects into \ref medcoupling "MEDCoupling"
, \ref ParaMEDMEM::DataArray "DataArrays" introduces concepts of copy and comparison that will be used by aggregating classes.

For more complex objects (that aggregate themselves big objects)
like ParaMEDMEM::MEDCouplingFieldDouble the concept of copy (shallow or deep) is less straight forward because which aggregated subobjects are copied or not.

\subsection MEDCouplingArrayBasicsCopyDeep Deep copy of DataArray

As for all potentially heavy memory consumer objects in \ref medcoupling "MEDCoupling", \ref ParaMEDMEM::DataArray "DataArrays" implement
 method \c deepCpy. This method deeply copies an instance. The life cycle of the returned object is *fully* independent from the instance on which the method
\c deepCpy has been invoked.

\ref cpp_mcdataarray_deepcopy "Here is a C++ example."<br>

\subsection MEDCouplingArrayBasicsCopyShallow Shallow copy of DataArray

As \ref ParaMEDMEM::DataArray "DataArrays" are the atomic entity of potentially big memory objects into \ref medcoupling "MEDCoupling", the shallow copy
simply returns the same object with the reference counter incremented.

\ref cpp_mcdataarray_shallowcopy "Here is a C++ example."<br>


\section MEDCouplingArrayBasicsCompare Compare DataArrays.

Comparison is \ref medcoupling "MEDCoupling" is a concept highly sensitive because big amount of tests uses this to state about the success or the fail of these tests.
There are two types of comparison :

- strict, that compares strictly all the non mutable attributes (state sensitive). Methods to perform this strict comparison are :
  - ParaMEDMEM::DataArrayInt::isEqual
  - ParaMEDMEM::DataArrayDouble::isEqual.

- less strict, that focus only on non string attributes. Methods to perform less strict comparison are :
  - ParaMEDMEM::DataArrayInt::isEqualWithoutConsideringStr
  - ParaMEDMEM::DataArrayDouble::isEqualWithoutConsideringStr

\section MEDCouplingArrayFill Filling DataArray with values

Both DataArrayDouble and DataArrayInt provide comfort methods that
fill the array with some values. These methods are:
- ParaMEDMEM::DataArrayInt::fillWithZero and
  ParaMEDMEM::DataArrayDouble::fillWithZero which assigns zero to all
  values in array.
- ParaMEDMEM::DataArrayInt::fillWithValue and
  ParaMEDMEM::DataArrayDouble::fillWithValue which assigns a certain value to all
  values in array.
- ParaMEDMEM::DataArrayInt::iota() and
  ParaMEDMEM::DataArrayDouble::iota() which assigns incrementing values to all
  values in array.

\section MEDCouplingArrayRenumbering Array renumbering

Here is presented all it is necessary to know concerning renumbering.
Renumbering is intensely required in %MEDLoader in %ParaMEDMEM. One of the user of renumbering is MED file for I/O where cells are sorted by type.
But it is also used on operations of node cell merging. It is also used in parallel mode when splitting of mesh is needed...

Formally a renumbering is a mathematical application that can be surjective, injective or bijective. This application is defined using an instance of
\ref ParaMEDMEM::DataArrayInt "DataArrayInt". There are different ways to define this application.

\subsection MEDCouplingArrayRenumberingO2N Old to new mode

The old to new mode is particularly recommended for surjective and bijective application. This is typically the case of \ref ParaMEDMEM::MEDCouplingUMesh::mergeNodes "MEDCouplingUMesh::mergeNodes" method.
Let's consider a call to \ref ParaMEDMEM::MEDCouplingUMesh::mergeNodes "mergeNodes" that reduces the number of nodes from 5 nodes to 3 nodes.\n
In old to new mode the array \b MySurjection that specifies this surjection will have 5 tuples and 1 component. The content of the 5*1 values will be in {0,1,2}.\n

If \b MySujection equals [2,1,0,1,2], it means that :

- old id #0 will have new id equal to 2
- old id #1 will have new id equal to 1
- old id #2 will have new id equal to 0
- old id #3 will have new id equal to 1 like old id #1
- old id #4 will have new id equal to 2 like old id #0

This is the most common mode of renumbering in MEDCoupling because there is more methods implying renumbering that reduce the number of entities than method that increase number of entities.

Method in old to new mode that works on bijective applications :

- \ref ParaMEDMEM::DataArrayDouble::renumber "DataArrayDouble::renumber"
- \ref ParaMEDMEM::DataArrayDouble::renumberInPlace "DataArrayDouble::renumberInPlace"

Method in old to new mode that works on surjective applications :

- \ref ParaMEDMEM::DataArrayDouble::renumberAndReduce "DataArrayDouble::renumberAndReduce"

Sometimes the format old to new for surjections can be replaced by another format with 2 arrays. Less compact in memory. The \ref ParaMEDMEM::DataArrayInt::changeSurjectiveFormat "DataArrayInt::changeSurjectiveFormat" method performs that.

\subsection MEDCouplingArrayRenumberingN2O New to old mode

The new to old mode is particularly recommended for strictly injective and bijective permutations. This is particularly useful for methods that increase the number of entities like for example
\ref ParaMEDMEM::MEDCouplingUMesh::simplexize "MEDCouplingUMesh::simplexize".\n
All non static methods in \ref ParaMEDMEM::DataArrayDouble "DataArrayDouble" or \ref ParaMEDMEM::DataArrayInt "DataArrayInt" having as last letter \b R (meaning Reversed) in capital works with
the mode new to old.
Let's consider a call to \ref ParaMEDMEM::MEDCouplingUMesh::simplexize "simplexize" that increases the number of cell from 4 cells to 6 cells.\n
In new to old mode the array \b MyInjection that specifies this injection will have 6 tuples and 1 component. The content of the 5*1 values will be in {0,1,2,3}.\n
If \b MyInjection equals [2,0,1,1,3,0] it means that :

- new id #0 comes from old id 2
- new id #1 comes from old id 0
- new id #2 comes from old id 1
- new id #3 comes from old id 1
- new id #4 comes from old id 3
- new id #5 comes from old id 0

Method in new to old mode that works on bijective applications :

- \ref ParaMEDMEM::DataArrayDouble::renumberR "DataArrayDouble::renumberR"
- \ref ParaMEDMEM::DataArrayDouble::renumberInPlace "DataArrayDouble::renumberInPlaceR"

Method in new to old mode that works on surjective applications :

- \ref ParaMEDMEM::DataArrayDouble::selectByTupleId "DataArrayDouble::selectByTupleId"
- \ref ParaMEDMEM::DataArrayDouble::selectByTupleIdSafe "DataArrayDouble::selectByTupleIdSafe"
- \ref ParaMEDMEM::DataArrayDouble::selectByTupleId2 "DataArrayDouble::selectByTupleId2"
- \ref ParaMEDMEM::DataArrayDouble::selectByTupleRanges "DataArrayDouble::selectByTupleRanges"

\section MEDCouplingArrayApplyFunc Application of a function on DataArrayDouble instances.

This section is only dedicated for \ref ParaMEDMEM::DataArrayDouble "DataArrayDouble instances".

It is possible to apply to \ref ParaMEDMEM::DataArrayDouble "DataArrayDouble instance" a function given by a string.

There are different API for applyFunc* methods of \ref ParaMEDMEM::DataArrayDouble "DataArrayDouble class".

\subsection MEDCouplingArrayApplyFuncExpr Expressions supported

In order to reduce as much as possible dependencies, a little dynamic formula interpreter has been developed into INTERP_KERNEL.
This dynamic expression evaluator can deal the following exhaustive list :

- +,-,*,^ (^ for exponent 3^2==9)
- sin,cos,tan,sqrt,abs,exp,max,min,ln (neper logarithm), log (neper logarithm), log10 (decimal logarithm),
- >,<
- if

The expression evaluator is also sensitive to the following var pattern : IVec, JVec, KVec, LVec,... ,ZVec

- IVec stands for unitary vector [1,0,0,0,...]
- JVec stands for unitary vector [0,1,0,0,...]
- KVec stands for unitary vector [0,0,1,0,...]
- ...

The dynamic expression evaluator works tuple by tuple through the *raw data* of DataArrayDouble instance.

The principle of the dynamic expression evaluator is the following :

- Given the input string a compilation tree is built whose leaves are either constants or variables.
  At this phase only syntax errors are thrown.
\anchor MEDCouplingArrayApplyFuncExprA1
- Then given the computed tree, a link phase is performed to accelerate evaluation. At this phase the incoherence between the number of
  components and the number of variables are detected.

- The given the preprocessed tree given an input tuple a preallocated tuple is fed with the result of the evaluation.
  At this last phase only mathematical errors are thrown (division by 0, log(0), sqrt of a negative number ...)

\subsection MEDCouplingArrayApplyFunc0 applyFunc method with only one parameter

This method produces a newly allocated DataArrayDouble instance having exactly the same number of components **and** number of tuples than the instance on which the
\ref ParaMEDMEM::DataArrayDouble::applyFunc(const char *) const applyFunc method is applied.

**This method is useful when the evaluation expression do not need to consider the components of each tuple separately**.

That's why this method of \ref ParaMEDMEM::DataArrayDouble::applyFunc(const char *) const applyFunc method with one parameter accepts at most only one variable.

If it is not the case an exception is thrown as seen here :

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_1

Let's take a very simple example on a DataArrayDouble instance \c d having 4 tuples and 2 components.

In the next example the expression contains only one variable : \c smth.
So \c smth represent a tuple of size 2.

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_2

As the example shows, the output \c d1 has 2 components as \c d.

Whereas all the components of the input of \c d be not considered separately, it is also, possible with \ref ParaMEDMEM::DataArrayDouble::applyFunc(const char *) const applyFunc method with one parameter
to build an output having same number of components than input but where components in input are treated separately.

Let's build an example using DataArrayDouble instance \c d defined just above.

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_3

In this example using IVec and JVec it is possible to differentiate output in component #0 and output in component #1 for DataArrayDouble instance \c d2.

\subsection MEDCouplingArrayApplyFunc1 applyFunc method with only two parameters

This method also returns a newly allocated DataArrayDouble instance having the same number of tuples than the DataArrayDouble instance on which \ref ParaMEDMEM::DataArrayDouble::applyFunc(int,const char *) const applyFunc method is called, but the contrary to previous \ref MEDCouplingArrayApplyFunc0 "applyFunc with one parameter version" here the number of components is set by the user.

The big difference with \ref MEDCouplingArrayApplyFunc0 "applyFunc method with one parameter" seen above is that here components of tuples are treated separately.

The method that implements it is \ref ParaMEDMEM::DataArrayDouble::applyFunc(int,const char *) const here.

Here the number of variables appearing in the expression should be equal at most to the number of component of the DataArrayDouble instance on which \ref ParaMEDMEM::DataArrayDouble::applyFunc(int,const char *) const applyFunc method is called.

Let's consider the following DataArrayDouble having 4 tuples with 3 components called dd.

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_4

If you intend to create a new DataArrayDouble instance called \c dd1 having only one component that is the result of the sum of first component and the square root of the second component and the third component
the invocation should be something like this :

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_5

\warning In the expression \c "f+sqrt(g)+h", there are 3 variables \c {"g","h","f"}. As seen \ref MEDCouplingArrayApplyFuncExprA1 "in link phase in expression evaluator" it is needed to match a variable to
the component id. The strategy of expression evaluator is the following. Sort ascendingly variables using their names and affect component id following this sorted list. It leads to :
- \c f will be attached to component #0 of \c dd
- \c g will be attached to component #1 of \c dd
- \c h will be attached to component #2 of \c dd

Considering the previous warning, let's try to perform an application of function to compute in a DataArrayDouble instance called \c dd2 starting by adding component #0 and component #2
of \c dd.
\nThe expression \c "a+c" will add component #0 to component #1 as seen in warning section !!!! It can appear silly, but this strategy has been chosen in order to support different set of variables.
\n \ref ParaMEDMEM::DataArrayDouble::applyFunc2 "applyFunc2" and \ref ParaMEDMEM::DataArrayDouble::applyFunc3 "applyFunc3" methods have been developed to remedy to that feature that can be surprising.
\n These two methods are explained respectively \ref MEDCouplingArrayApplyFunc2 "here for applyFunc2" and \ref MEDCouplingArrayApplyFunc3 "here for applyFunc3".

Whatever it is possible to find a workaround using \ref ParaMEDMEM::DataArrayDouble::applyFunc(int,const char *) const applyFunc with 2 parameters.
\n Here is a solution to compute \c dd2 :

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_6

\subsection MEDCouplingArrayApplyFunc2 applyFunc2 method

The method that implements it is \ref ParaMEDMEM::DataArrayDouble::applyFunc2 here.

This method is very close to \ref MEDCouplingArrayApplyFunc1 "applyFunc method with only two parameters".

The only difference is the mapping between variables found in expression and tuple id. Rather than using rank in string sorting as \ref MEDCouplingArrayApplyFunc1 "applyFunc method with only two parameters uses" here the component information are considered.

Let's consider DataArrayDouble instance \c ddd constituted with 4 tuples containing each 3 components. The components are named respectively \c {"Y","AA","GG"} with following different units attached on them.

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_7

To compute the sum of the first component (component #0) and the third component (component #2) simply do that :

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_8

\subsection MEDCouplingArrayApplyFunc3 applyFunc3 method

The method that implements it is \ref ParaMEDMEM::DataArrayDouble::applyFunc3 here.

This method is very close to \ref MEDCouplingArrayApplyFunc1 "applyFunc method with only two parameters" and \ref MEDCouplingArrayApplyFunc2 "applyFunc2".

The only difference is the mapping between variables found in expression and tuple id. Rather than using rank in string sorting as in \ref MEDCouplingArrayApplyFunc1 "applyFunc method with only two parameters uses" or the component information as in \ref MEDCouplingArrayApplyFunc2 "applyFunc2", here an explicit vector is given in input.

Let's consider DataArrayDouble instance \c ddd constituted with 4 tuples containing each 3 components. To add first component (component #0) and the third component (component #2) simply do that :

\snippet MEDCouplingExamplesTest.py PySnippetDataArrayApplyFunc1_9

*/
