/*!

\mainpage Introduction

Simulation studies require the manipulation of meshes and fields for data
pre-processing, in calculation schemes (including chaining and coupling
of codes), or even for results post-processing.

Corresponding computer codes can be viewed as software components accessing
input meshes and fields (with specific constraints) along with parameters
(datasets), and producing result meshes and fields. Each code presents by
construction the specificities of its discipline.

The MED module aims at pooling operations on meshes and fields, facilitating
their use by various codes involved in a simulation process. This includes
making codes communicate while preserving as much as possible the integrity of
their content.

To fulfill its objective, the MED module includes:
- Handling meshes and fields to satisfy code input requirements.
- Extraction of field information to post-process computation results of
a code.
- Projections and serialization to exchange meshes and fields between codes.

In addition, the MED module offers several interfacing levels; users can thus
benefit from an interaction level adapted to their codes.

Main services offered by MEDCoupling are:
- Manipulation of fields and their support mesh, serialized with MED format.
- Operations on scalars, vectors, and second order tensors.
- 1D/2D/3D interpolation on nodes, cells, Gauss points and nodes by element.

MEDCoupling thus considers:
- Data dimension.
- Nature of information on fields, as well as conservation laws.
- Field profiles and mesh connectivity.


\image html projectionHQ_600.png
<br />

\section contents Contents
This document is organized as follows:
- Recall of some basic \ref glossary about mesh and field manipulation.
- \ref library to manipulate meshes and fields that conform
  to the MED data model. This library can be used in C++ programs as
  in python script for data processing on meshes and fields.
- Technical presentation of \ref medcoupling that describes DataStructures
used for cross process exchange of meshes and fields.
- Technical presentation of \ref medloader that provides I/O functions to the
MED file format.
- \ref interptools, from theory to practice using MEDCoupling.
- Summary of  \ref functionalities "available functionalities".
- \ref medcouplingpyexamples and tutorials.
- \ref gui that exhibits some useful functions of the library for a graphical
manipulation of data in standard use cases.
- \ref tools based on MEDLoader that can be used to process MED data files
(conversion tools and splitting tools).
- \ref medcouplingcppexamples for advanced users.


\section install Installation
The install procedure of the %MED SALOME module can handle a variety of configurations
to suit the needs of its user. Instructions for configuring and
installing the module can be found in \ref paramedmem_install.


\section references References
Here follows a list of useful references :

-# \anchor RefManualMedFile Reference Manual for Med File, V. Lefebvre,  E. Fayolle, Projet PAL: D&eacute;finition du mod&egrave;le d'&eacute;change de donn&eacute;es MED V2.2,  Note technique EDF/SINETICS, HI-26-03-012/A, https://hammi.extra.cea.fr/static/MED/web_med/index.html
-# VTK home page: \c http://public.kitware.com/VTK
-# Med File Data Model : V. Lefebvre,  E. Fayolle, D&eacute;finition du mod&egrave;le d'&eacute;change de donn&eacute;es MED v2.2, https://hammi.extra.cea.fr/static/MED/web_med/pdf/NOTE_HI_26_03_012_A.pdf
-# Jeffrey Grandy, Conservative remapping and region overlays by intersecting arbitrary polyhedra, Journal of Computational Physics, vol 148, 433-466 (1999)
-# F. Preparata and M. Shamos Computational Geometry. Springer-Verlag, New York, 1985

*/
