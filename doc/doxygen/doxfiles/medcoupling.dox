/*!
\page medcoupling MEDCoupling

\section MEDCouplingIntro Introduction

MEDCoupling is a library (\b libmedcoupling.so or \b medcoupling.dll) fully written in C++ and wrapped to be called in Python too.

MEDCoupling C++ library implements a data structure which is the result of the following tradeoff :

- Compliant with coupling :
  - Fields definition defined enough to perform well defined interpolation
  - exchangeable through process as well in parallel case in SPMD paradigm ( \ref paramedmem "ParaMEDMEM" ), as in distributed paradigm using CORBA.
- minimize as much as possible the number of prerequisites needed to use it ; So MEDCoupling only depends on
\ref interpkernel "INTERP_KERNEL library"
- light enough to be agile in order to :
   - maximize the amount of algorithms being applied on it
   - to ease implementation of clients of MEDCoupling.
- large enough to be used for MED file I/O.
- compliant with VTK visualization DataStructure
- integrate HPC constraints (compact structures, limitation of copies and launching of CPU consuming algorithms only when absolutely needed ).
- compliant with ICOCO API

MEDCoupling implements a set of algorithms linked to the data structure.

\section MEDCouplingMainConc Main Concepts

Here are listed basic concepts present into MEDCoupling.

For beginners in MEDCoupling world, it is advisable to read the following concepts in the same order than the underlying list.

- \subpage MEDCouplingArrayPage "DataArrays"
- \subpage MEDCouplingMeshesPage "Meshes"
- \subpage MEDCouplingFieldsPage "Fields"
- \subpage MEDCouplingFieldTemplatesPage "Field templates"
- \subpage MEDCouplingTimeLabelPage "Time labels"

*/
