/*!
\page intro-interp Interpolation presentation

\section interp-over Overview

The InterpKernel algorithms are part of the MED tool suite. They
answer to the following basic problem : given a source mesh \f$M_s\f$, a
source field \f$F_s\f$ and a target mesh \f$M_t\f$, reconstruct a field \f$F_t\f$
that uses \f$M_t\f$ as a support. The InterpKernel suite gives a number of
possibilities to compute the target field, depending on a variety of
user constraints.

\image html interpolationimage.png "General interpolation scheme" width=10cm

Two different APIs are available depending on whether you run sequentially or in parallel:
- the \ref remapper "remapper class" (based on the underlying \ref interpkernel "InterpKernel" library) 
for sequential codes, which uses MEDCoupling \ref fields "fields" and other core data structures.
- the \ref parallel "ParaMEDMEM API" for parallel MPI based codes using \c %ParaMEDMEM distributed fields
(\ref MEDCoupling::ParaFIELD "ParaFIELD"), which is also based on the algorithms of the 
\ref interpkernel "InterpKernel" library.

The following space/mesh dimensions are covered:
- 1D, 2D lines, 2D surfaces (\ref interpolation2D), 
- 3D surfaces (\ref interpolation3Dsurf) 
- and 3D volumes (\ref interpolation3D)

The interpolation is performed either by:
- node localization (\ref pointlocator "PointLocator"), when for example a node field is projected to a cell field
- or via cell intersection (\ref ConsInterp), when for example a cell field is projected to another cell field.
For any given type of interpolation involving cell intersection computation, the computation of 
interpolation matrix W is performed in two steps :
    -# A filtering process reduces the number of pairs of elements for which the calculation 
must be carried out by eliminating the pairs whose bounding boxes do not intersect.
    -# For all remaining pairs, call the appropriate \ref InterpKerIntersectors "cell intersector"

More complex treatments are also available:
- treatment of extended polygons (where edges can be arcs or segments)
for 2D intersection computations, via the \ref interpkernelGeo2D "Geometric2D intersector",

Finally the following types of \ref discretization "spatial discretization" combinations are supported: 
- management of fields with P0,P1 or P2 representations
- P0<->P0, P1<->P0, P1<->P1 and P2->P0 (non conservative) interpolators are available.

Remember that whatever the situation you face, you must always specify whether the field 
represents an extensive or intensive physical quantity through 
the \ref NatureOfField "nature" attribute of the \ref fields "field".

\section interp-api Key elements of the API

TODO, list setOption, setIntersectionType, etc ...

*/
