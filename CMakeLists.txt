# Copyright (C) 2015  CEA/DEN, EDF R&D
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.2 FATAL_ERROR)
#INCLUDE(CMakeDependentOption)
PROJECT(MEDCoupling C CXX)

# Ensure a proper linker behavior:
CMAKE_POLICY(SET CMP0003 NEW)

# Versioning
# ===========
# Project name, upper case
STRING(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UC)

SET(${PROJECT_NAME_UC}_MAJOR_VERSION 1)
SET(${PROJECT_NAME_UC}_MINOR_VERSION 0)
SET(${PROJECT_NAME_UC}_PATCH_VERSION 0)
SET(${PROJECT_NAME_UC}_VERSION
  ${${PROJECT_NAME_UC}_MAJOR_VERSION}.${${PROJECT_NAME_UC}_MINOR_VERSION}.${${PROJECT_NAME_UC}_PATCH_VERSION})
SET(${PROJECT_NAME_UC}_VERSION_DEV 1)

# Our own set of macros:
LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake_files")
INCLUDE(MEDCouplingMacros)

#
# User options
# ============
INCLUDE(CMakeDependentOption)
OPTION(MEDCOUPLING_MED_MICROMED "Build MED without MED file dependancy." OFF)
OPTION(MEDCOUPLING_MED_ENABLE_PYTHON "Build PYTHON bindings." ON)
OPTION(MEDCOUPLING_MED_ENABLE_PARTITIONER "Build MEDPartitioner." ON)
OPTION(MEDCOUPLING_MED_ENABLE_RENUMBER "Build Renumber." ON)
OPTION(MEDCOUPLING_MED_WITH_FILE_EXAMPLES "Install examples of files containing meshes and fields of different formats." ON)
OPTION(MEDCOUPLING_USE_MPI "(Use MPI containers) - For MED this triggers the build of ParaMEDMEM." OFF)
OPTION(MEDCOUPLING_BUILD_TESTS "Build MED tests." ON)
OPTION(MEDCOUPLING_BUILD_DOC "Build MED doc." ON)
CMAKE_DEPENDENT_OPTION(MEDCOUPLING_MED_PARTITIONER_METIS "Enable metis graph library in MEDPartitioner." ON "MEDCOUPLING_MED_ENABLE_PARTITIONER" OFF)
CMAKE_DEPENDENT_OPTION(MEDCOUPLING_MED_PARTITIONER_SCOTCH "Enable scotch graph library in MEDPartitioner." ON "MEDCOUPLING_MED_ENABLE_PARTITIONER;NOT MEDCOUPLING_USE_MPI" OFF)
CMAKE_DEPENDENT_OPTION(MEDCOUPLING_MED_PARTITIONER_PARMETIS "Enable parmetis graph library in MEDPartitioner." ON "MEDCOUPLING_MED_ENABLE_PARTITIONER;MEDCOUPLING_USE_MPI" OFF)
IF(WIN32)
  CMAKE_DEPENDENT_OPTION(MEDCOUPLING_MED_MEDLOADER_USE_XDR "Enable use of XDR for SauvReader." ON "NOT MEDCOUPLING_MED_MICROMED" OFF)
ENDIF(WIN32)

#
# Set list of prerequisites
# =========================

IF(NOT MEDCOUPLING_MED_MICROMED)
  FIND_PACKAGE(HDF5 REQUIRED)
  FIND_PACKAGE(MEDFile REQUIRED)
  # XDR stuff
  IF(NOT WIN32)
    FIND_PACKAGE(XDR REQUIRED)
  ELSE(NOT WIN32)
    IF(MEDCOUPLING_MED_MEDLOADER_USE_XDR)
      FIND_PACKAGE(XDR REQUIRED)
    ENDIF(MEDCOUPLING_MED_MEDLOADER_USE_XDR)
  ENDIF(NOT WIN32)
  # End of XDR Stuff
  IF(MEDCOUPLING_MED_ENABLE_PARTITIONER)
    IF(DEFINED ENV{LIBXML2_ROOT_DIR})
      SET(LIBXML2_ROOT_DIR $ENV{LIBXML2_ROOT_DIR} CACHE PATH "Path to the LibXml2.")
      LIST(APPEND CMAKE_PREFIX_PATH "${LIBXML2_ROOT_DIR}")
    ENDIF()
    FIND_PACKAGE(LibXml2)
    IF(MEDCOUPLING_MED_PARTITIONER_METIS)
      FIND_PACKAGE(Metis)
      ADD_DEFINITIONS("-DMED_ENABLE_METIS")
    ENDIF(MEDCOUPLING_MED_PARTITIONER_METIS)
    IF(MEDCOUPLING_MED_PARTITIONER_SCOTCH)
      FIND_PACKAGE(Scotch)
      ADD_DEFINITIONS("-DMED_ENABLE_SCOTCH")
    ENDIF(MEDCOUPLING_MED_PARTITIONER_SCOTCH)
  ENDIF(MEDCOUPLING_MED_ENABLE_PARTITIONER)
ENDIF(NOT MEDCOUPLING_MED_MICROMED)

ENABLE_TESTING() # let it outsite because even if MEDCOUPLING_BUILD_TESTS is OFF, python tests that not need additional compilation can be run.

IF(MEDCOUPLING_BUILD_TESTS)
  FIND_PACKAGE(CppUnit)
ENDIF(MEDCOUPLING_BUILD_TESTS)

IF(MEDCOUPLING_USE_MPI)
  FIND_PACKAGE(MPI REQUIRED)
  ADD_DEFINITIONS("-DHAVE_MPI")
  SET(MPI_INCLUDE_DIRS ${MPI_C_INCLUDE_PATH} ${MPI_CXX_INCLUDE_PATH})
  SET(MPI_LIBRARIES ${MPI_C_LIBRARIES} ${MPI_CXX_LIBRARIES})
  SET(MPI_DEFINITIONS "${MPI_CXX_COMPILE_FLAGS}")

  IF(MEDCOUPLING_MED_PARTITIONER_PARMETIS)
    FIND_PACKAGE(ParMetis)
    ADD_DEFINITIONS("-DMED_ENABLE_PARMETIS")
  ENDIF(MEDCOUPLING_MED_PARTITIONER_PARMETIS)
ENDIF(MEDCOUPLING_USE_MPI)

IF(MEDCOUPLING_MED_ENABLE_RENUMBER)
  IF(DEFINED ENV{BOOST_ROOT_DIR})
    SET(BOOST_ROOT_DIR $ENV{BOOST_ROOT_DIR} CACHE PATH "Path to the Boost.")
    LIST(APPEND CMAKE_PREFIX_PATH "${BOOST_ROOT_DIR}")
  ENDIF()
  SET(Boost_USE_STATIC_LIBS        OFF)
  SET(Boost_USE_MULTITHREADED      ON)
  SET(Boost_USE_STATIC_RUNTIME     OFF)
  SET(Boost_NO_BOOST_CMAKE         ON)
  FIND_PACKAGE(Boost)
ENDIF(MEDCOUPLING_MED_ENABLE_RENUMBER)

IF(MEDCOUPLING_BUILD_DOC)
  FIND_PACKAGE(Doxygen)
  FIND_PACKAGE(Graphviz)
  FIND_PACKAGE(Sphinx)
ENDIF(MEDCOUPLING_BUILD_DOC)

IF(MEDCOUPLING_MED_ENABLE_PYTHON)
  FIND_PACKAGE(PythonInterp)
  GET_FILENAME_COMPONENT(_python_dir "${PYTHON_EXECUTABLE}" PATH)
  GET_FILENAME_COMPONENT(CMAKE_INCLUDE_PATH "${_python_dir}/../include/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}" ABSOLUTE)
  GET_FILENAME_COMPONENT(CMAKE_LIBRARY_PATH "${_python_dir}/../lib" ABSOLUTE)
  SET(PythonLibs_FIND_VERSION "${PYTHON_VERSION}")
  FIND_PACKAGE(PythonLibs)

  FIND_PACKAGE(SWIG)
  # Set the extra flags for SWIG for numpy and scipy
  SET(SWIG_EXTRA_FLAGS_FOR_NUMPYANDSCIPY)
  IF(NUMPY_FOUND)
    SET(SWIG_EXTRA_FLAGS_FOR_NUMPYANDSCIPY "-DWITH_NUMPY")
  ENDIF(NUMPY_FOUND)
  IF(SCIPY_FOUND)
    SET(SWIG_EXTRA_FLAGS_FOR_NUMPYANDSCIPY "${SWIG_EXTRA_FLAGS_FOR_NUMPYANDSCIPY};-DWITH_SCIPY")
  ENDIF(SCIPY_FOUND)
ENDIF(MEDCOUPLING_MED_ENABLE_PYTHON)

# Directories
#
# Directories have to be given after prerequisites (to be able to use
# Python version string for example).
# ===========
SET(MEDCOUPLING_INSTALL_BINS bin CACHE PATH "Install path: MEDCoupling binaries")
SET(MEDCOUPLING_INSTALL_LIBS lib CACHE PATH "Install path: MEDCoupling libs")
SET(MEDCOUPLING_INSTALL_HEADERS include CACHE PATH "Install path: MEDCoupling headers")
SET(MEDCOUPLING_INSTALL_SCRIPT_SCRIPTS ${MEDCOUPLING_INSTALL_BINS} CACHE PATH "Install path: MEDCoupling scripts")
SET(MEDCOUPLING_INSTALL_TESTS tests CACHE PATH "Install path: MEDCoupling tests")
# SET(MEDCOUPLING_INSTALL_SCRIPT_DATA ${MEDCOUPLING_INSTALL_BINS} CACHE PATH "Install path: MEDCoupling script data")
SET(MEDCOUPLING_INSTALL_SCRIPT_PYTHON ${MEDCOUPLING_INSTALL_BINS} CACHE PATH "Install path: MEDCoupling Python scripts")
SET(MEDCOUPLING_INSTALL_CMAKE_LOCAL cmake_files CACHE PATH "Install path: local MEDCoupling CMake files")

IF(MEDCOUPLING_MED_ENABLE_PYTHON)
  SET(_pydir lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages)
  SET(MEDCOUPLING_INSTALL_PYTHON ${_pydir} CACHE PATH "Install path: MEDCoupling Python stuff")
  SET(MEDCOUPLING_INSTALL_PYTHON_SHARED ${MEDCOUPLING_INSTALL_PYTHON}/shared_modules CACHE PATH
    "Install path: MEDCoupling Python shared modules")
ENDIF(MEDCOUPLING_MED_ENABLE_PYTHON)

SET(MEDCOUPLING_INSTALL_RES share/resources CACHE PATH "Install path: MEDCoupling resources")
SET(MEDCOUPLING_INSTALL_DOC share/doc CACHE PATH "Install path: MEDCoupling documentation")

# Med specific:

SET(MEDCOUPLING_INSTALL_RES_DATA "${MEDCOUPLING_INSTALL_RES}/med" CACHE PATH "Install path: MEDCoupling specific data")
#SET(MEDCOUPLING_MED_INSTALL_RES_SCRIPTS "${MEDCOUPLING_INSTALL_RES}/med" CACHE PATH "Install path: MEDCouplng specific scripts")

MARK_AS_ADVANCED(MEDCOUPLING_INSTALL_BINS MEDCOUPLING_INSTALL_LIBS MEDCOUPLING_INSTALL_IDLS MEDCOUPLING_INSTALL_HEADERS)
MARK_AS_ADVANCED(MEDCOUPLING_INSTALL_SCRIPT_SCRIPTS MEDCOUPLING_INSTALL_SCRIPT_DATA MEDCOUPLING_INSTALL_SCRIPT_PYTHON)
MARK_AS_ADVANCED(MEDCOUPLING_INSTALL_APPLISKEL_SCRIPTS  MEDCOUPLING_INSTALL_APPLISKEL_PYTHON MEDCOUPLING_INSTALL_CMAKE MEDCOUPLING_INSTALL_CMAKE_LOCAL MEDCOUPLING_INSTALL_RES)
MARK_AS_ADVANCED(MEDCOUPLING_INSTALL_PYTHON MEDCOUPLING_INSTALL_PYTHON_SHARED MEDCOUPLING_MED_INSTALL_RES_DATA MEDCOUPLING_MED_INSTALL_RES_SCRIPTS MEDCOUPLING_INSTALL_DOC)

# Header configuration
# ====================
MEDCOUPLING_XVERSION(${PROJECT_NAME})
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/MEDCoupling_version.h.in ${CMAKE_CURRENT_BINARY_DIR}/MEDCoupling_version.h)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/MEDCoupling_version.h DESTINATION ${MEDCOUPLING_INSTALL_HEADERS})

# Accumulate environment variables for MED module
#SALOME_ACCUMULATE_ENVIRONMENT(PYTHONPATH NOCHECK ${CMAKE_INSTALL_PREFIX}/${MEDCOUPLING_INSTALL_BINS}
#                                                 ${CMAKE_INSTALL_PREFIX}/${MEDCOUPLING_INSTALL_PYTHON})
#SALOME_ACCUMULATE_ENVIRONMENT(LD_LIBRARY_PATH NOCHECK ${CMAKE_INSTALL_PREFIX}/${MEDCOUPLING_INSTALL_LIBS})


# Sources
# ========
IF(WIN32)
  ADD_DEFINITIONS("-D_USE_MATH_DEFINES")
ENDIF(WIN32)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(cmake_files)

IF(MEDCOUPLING_BUILD_DOC)
  ADD_SUBDIRECTORY(doc)
ENDIF(MEDCOUPLING_BUILD_DOC)

IF(NOT MEDCOUPLING_MED_MICROMED)
  IF(MEDCOUPLING_MED_WITH_FILE_EXAMPLES)
    ADD_SUBDIRECTORY(resources)
  ENDIF(MEDCOUPLING_MED_WITH_FILE_EXAMPLES)
ENDIF(NOT MEDCOUPLING_MED_MICROMED)

# Configuration export
# ====================

# List of targets in this project we want to make visible to the rest of the world.
# They all have to be INSTALL'd with the option "EXPORT ${PROJECT_NAME}TargetGroup"
SET(_${PROJECT_NAME}_exposed_targets
   interpkernel medcoupling medcouplingremapper)

IF(NOT MEDCOUPLING_MED_MICROMED)
  LIST(APPEND _${PROJECT_NAME}_exposed_targets medloader)
  IF(MEDCOUPLING_MED_ENABLE_RENUMBER)
    LIST(APPEND _${PROJECT_NAME}_exposed_targets renumbercpp)
  ENDIF()
  IF(MEDCOUPLING_MED_ENABLE_PARTITIONER)
    LIST(APPEND _${PROJECT_NAME}_exposed_targets medpartitionercpp)
    IF(MEDCOUPLING_BUILD_TESTS)
      LIST(APPEND _${PROJECT_NAME}_exposed_targets MEDPARTITIONERTest)
    ENDIF()
  ENDIF()
  IF(MEDCOUPLING_BUILD_TESTS)
    LIST(APPEND _${PROJECT_NAME}_exposed_targets InterpKernelTest)
  ENDIF()
ENDIF()

IF(MEDCOUPLING_USE_MPI)
  LIST(APPEND _${PROJECT_NAME}_exposed_targets paramedmem)
  IF(NOT MEDCOUPLING_MED_MICROMED)
    LIST(APPEND _${PROJECT_NAME}_exposed_targets paramedloader)
  ENDIF()
  IF(MEDCOUPLING_BUILD_TESTS)
    IF(NOT MEDCOUPLING_MED_MICROMED)
      LIST(APPEND _${PROJECT_NAME}_exposed_targets ParaMEDMEMTest)
    ENDIF()
  ENDIF()
ENDIF()

# Add all targets to the build-tree export set

EXPORT(TARGETS ${_${PROJECT_NAME}_exposed_targets}
  FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)

# Create the configuration files:
#   - in the build tree:

#      Ensure the variables are always defined for the configure (even if empty):
# SET(KERNEL_ROOT_DIR "${KERNEL_ROOT_DIR}")
# SET(GUI_ROOT_DIR "${GUI_ROOT_DIR}")
# SET(MEDFILE_ROOT_DIR "${MEDFILE_ROOT_DIR}")
# SET(MPI_ROOT_DIR "${MPI_ROOT_DIR}")
# SET(HDF5_ROOT_DIR "${HDF5_ROOT_DIR}")
# SET(OMNIORB_ROOT_DIR "${OMNIORB_ROOT_DIR}")
# SET(PTHREAD_ROOT_DIR "${PTHREAD_ROOT_DIR}")
# SET(BOOST_ROOT_DIR "${BOOST_ROOT_DIR}")
# SET(SWIG_ROOT_DIR "${SWIG_ROOT_DIR}")
# SET(PYTHON_ROOT_DIR "${PYTHON_ROOT_DIR}")
# SET(CPPUNIT_ROOT_DIR "${CPPUNIT_ROOT_DIR}")
# SET(GRAPHVIZ_ROOT_DIR "${GRAPHVIZ_ROOT_DIR}")
# SET(DOXYGEN_ROOT_DIR "${DOXYGEN_ROOT_DIR}")
# SET(SPHINX_ROOT_DIR "${SPHINX_ROOT_DIR}")

# SET(METIS_ROOT_DIR "${METIS_ROOT_DIR}")
# SET(PARMETIS_ROOT_DIR "${PARMETIS_ROOT_DIR}")
# SET(SCOTCH_ROOT_DIR "${SCOTCH_ROOT_DIR}")
# SET(XDR_ROOT_DIR "${XDR_ROOT_DIR}")

#   - in the install tree:
#       Get the relative path of the include directory so
#       we can register it in the generated configuration files:
SET(CONF_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/${INSTALL_INCLUDE_DIR}")

# Build variables that will be expanded when configuring Salome<MODULE>Config.cmake:
# SALOME_CONFIGURE_PREPARE(Metis ParMetis Scotch XDR CAS Qt4 CppUnit Graphviz Doxygen Sphinx MPI omniORB
#                          PThread Boost libXml2 Python HDF5 MEDFile)

# INCLUDE(CMakePackageConfigHelpers)
# CONFIGURE_PACKAGE_CONFIG_FILE(${PROJECT_NAME}Config.cmake.in
#     ${PROJECT_BINARY_DIR}/to_install/${PROJECT_NAME}Config.cmake
#     INSTALL_DESTINATION "${MEDCOUPLING_INSTALL_CMAKE}_LOCAL"
#     PATH_VARS CONF_INCLUDE_DIRS MEDCOUPLING_INSTALL_CMAKE_LOCAL CMAKE_INSTALL_PREFIX
#        KERNEL_ROOT_DIR GUI_ROOT_DIR MEDFILE_ROOT_DIR MPI_ROOT_DIR
#        HDF5_ROOT_DIR OMNIORB_ROOT_DIR PTHREAD_ROOT_DIR BOOST_ROOT_DIR
#        SWIG_ROOT_DIR PYTHON_ROOT_DIR CPPUNIT_ROOT_DIR GRAPHVIZ_ROOT_DIR DOXYGEN_ROOT_DIR
#        SPHINX_ROOT_DIR METIS_ROOT_DIR PARMETIS_ROOT_DIR SCOTCH_ROOT_DIR XDR_ROOT_DIR)

#WRITE_BASIC_PACKAGE_VERSION_FILE(${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
#    VERSION ${${PROJECT_NAME_UC}_VERSION}
#    COMPATIBILITY AnyNewerVersion)

# Install the CMake configuration files:
# INSTALL(FILES
#   "${PROJECT_BINARY_DIR}/to_install/${PROJECT_NAME}Config.cmake"
#   "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
#   DESTINATION "${MEDCOUPLING_INSTALL_CMAKE_LOCAL}")

# Install the export set for use with the install-tree
#INSTALL(EXPORT ${PROJECT_NAME}TargetGroup DESTINATION "${MEDCOUPLING_INSTALL_CMAKE_LOCAL}"
#        FILE ${PROJECT_NAME}Targets.cmake)
