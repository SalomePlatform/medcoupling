# Copyright (C) 2007-2016  CEA/DEN, EDF R&D, OPEN CASCADE
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
#

## Detect architecture
IF(WIN32)
  SET(MACHINE WINDOWS)
ELSE()
  SET(MACHINE PCLINUX)
ENDIF()

## Test for 64 bits
IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
  SET(MACHINE_IS_64 TRUE)
ELSE()
  SET(MACHINE_IS_64 FALSE)
ENDIF()

## Force CMAKE_BUILD_TYPE to Release if not set
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE $ENV{CMAKE_BUILD_TYPE})
ENDIF(NOT CMAKE_BUILD_TYPE)
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT CMAKE_BUILD_TYPE)

## Define the log level according to the build type
IF(CMAKE_BUILD_TYPE STREQUAL "DEBUG" OR CMAKE_BUILD_TYPE STREQUAL "Debug")
  SET(PYLOGLEVEL DEBUG)
ELSE()
  SET(PYLOGLEVEL WARNING)
ENDIF()

## Make all warnings errors on non-windows platforms
#  CURRENTLY DISABLED
IF(NOT (WIN32 OR APPLE))
  SET(ADD_WERROR ON)
  SET(NAMES ACCEPT_SALOME_WARNINGS ACCEPT_${MODULE}_WARNINGS I_AM_A_TROLL_I_DO_NOT_FIX_${MODULE}_WARNINGS)
  FOREACH(name ${NAMES})
    SET(VAL $ENV{${name}})
    IF("${VAL}" STREQUAL "0")
      SET(ADD_WERROR ON)
    ENDIF()
    IF("${VAL}" STREQUAL "1")
      SET(ADD_WERROR OFF)
    ENDIF()
  ENDFOREACH()
  
  IF(ADD_WERROR)
#    SET(CMAKE_C_FLAGS "-Werror")
#    SET(CMAKE_CXX_FLAGS "-Werror")
  ENDIF()
ENDIF()

## TODO: remove this ?
#IF(WIN32)
#    MARK_AS_ADVANCED(CLEAR CMAKE_CONFIGURATION_TYPES)
#    SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CACHE STRING "compilation types" FORCE)
#ELSE()
#    IF(CMAKE_BUILD_TYPE STREQUAL Debug)
#      SET(CMAKE_C_FLAGS_DEBUG "-g")
#      SET(CMAKE_CXX_FLAGS_DEBUG "-g")
#    ENDIF(CMAKE_BUILD_TYPE STREQUAL Debug)
#    IF(CMAKE_BUILD_TYPE STREQUAL Release)
#      SET(CMAKE_C_FLAGS_RELEASE "-O1 -DNDEBUG")
#      SET(CMAKE_CXX_FLAGS_RELEASE "-O1 -DNDEBUG")
#    ENDIF(CMAKE_BUILD_TYPE STREQUAL Release)
#ENDIF()

IF(WIN32)
  ## Windows specific:  
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)  # To disable windows warnings for strcpy, fopen, ...
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)  # To disable windows warnings generated by checked iterators(e.g. std::copy, std::transform, ...)
  ADD_DEFINITIONS(-DWNT -DWIN32)
  ADD_DEFINITIONS(-D_WIN32_WINNT=0x0500)      # Windows 2000 or later API is required
  ADD_DEFINITIONS(-DPPRO_NT)                  # For medfile
  #ADD_DEFINITIONS(-D_USE_MATH_DEFINES)        # for MEDMEM
    
  SET(PLATFORM_LIBS Ws2_32.lib)
  LIST(APPEND PLATFORM_LIBS Userenv.lib)      # At least for GEOM suit

################################################################################################
#
# RNV: In the SALOME sometimes operating with STL collections is done in not fully valid way. 
#      To avoid run-time exception in Debug mode default values of the _SECURE_SCL, 
#      _SECURE_SCL_THROWS and _HAS_ITERATOR_DEBUGGING macros were redefined. It solved a problem 
#      then we used tne Microsoft Visual Studio 2008 to build SALOME on Windows platform.
#      But in the Microsoft Visual Studio 2010 these macros affect on the size of STL collection 
#      classes(in difference from the Microsoft Visual Studio 2008: in this version of MSVS size
#      of the STL collection  classes does not depend on these macros).
#      All pre-requisite products are built by MSVS 2010 in Debug mode with the default 
#      values of the metioned above macros (namely _SECURE_SCL=1, _HAS_ITERATOR_DEBUGGING=1 and
#      _SECURE_SCL_THROWS=1). So SALOME modules should be build in the same configuration.
#
################################################################################################
#
#  # Disable iterator debugging on WINDOWS to avoid runtime error during checking iterators
#    # _SECURE_SCL
#    #             If defined as 1, unsafe iterator use causes a runtime error. 
#    #             If defined as 0, checked iterators are disabled.
#    #             The default value for _SECURE_SCL is 1
#    # _SECURE_SCL_THROWS
#    #             If defined as 1, an out of range iterator use causes an exception at runtime.
#    #             If defined as 0, the program is terminated by calling invalid_parameter. 
#    #             The default value for _SECURE_SCL_THROWS is 0
#  
#  ADD_DEFINITIONS(-D_SECURE_SCL=0 -D_SECURE_SCL_THROWS=0)
#
#    # The symbol _HAS_ITERATOR_DEBUGGING can be used to turn off the iterator debugging feature in a debug build
#    #             If defined as 1, iterator debugging is enabled. 
#    #             If defined as 0, iterator debugging is disabled.
#    #             The default value for _HAS_ITERATOR_DEBUGGING is 1
#
#  IF(NOT CMAKE_BUILD_TYPE STREQUAL "RELEASE" AND NOT CMAKE_BUILD_TYPE STREQUAL "Release")
#    ADD_DEFINITIONS(-D_HAS_ITERATOR_DEBUGGING=0)  
#  ENDIF(NOT CMAKE_BUILD_TYPE STREQUAL "RELEASE" AND NOT CMAKE_BUILD_TYPE STREQUAL "Release")
################################################################################################
  
  IF(MACHINE_IS_64)
    SET(SIZE_OF_LONG 4)                          # set sizeof(long) to 4 byte
  ELSE()
    SET(SIZE_OF_LONG ${CMAKE_SIZEOF_VOID_P})     # set sizeof(long) the same as size of pointers
  ENDIF()
ELSE()
  ## Linux specific:
  SET(PLATFORM_LIBS dl)    # Dynamic loading (dlopen, dlsym)
  IF(MACHINE_IS_64) 
    ADD_DEFINITIONS(-DPCLINUX64)
  ENDIF(MACHINE_IS_64)
ENDIF()

## define _DEBUG_ macro
IF(NOT CMAKE_BUILD_TYPE STREQUAL "RELEASE" AND NOT CMAKE_BUILD_TYPE STREQUAL "Release")
  ADD_DEFINITIONS(-D_DEBUG_)
ENDIF()

## Apple specific:
IF(APPLE)
  SET(CMAKE_C_COMPILER gcc)
  SET(CMAKE_CXX_COMPILER g++)
  # because default is clang(llvm) with mountain lion at least
ENDIF()

# Compiler flags for coverage testing
IF(NOT WIN32) 
  OPTION(SALOME_BUILD_FOR_GCOV "Add the compilation flags for GCov/LCov" OFF)
  MARK_AS_ADVANCED(SALOME_BUILD_FOR_GCOV)
  IF(SALOME_BUILD_FOR_GCOV)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
    SET(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage")
  ENDIF()
ENDIF()

IF(NOT NO_CXX11_SUPPORT)
  # C++11 support
  INCLUDE(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
  CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
  IF(COMPILER_SUPPORTS_CXX11)
    MESSAGE(STATUS "Enable C++11 support")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
  ELSEIF(COMPILER_SUPPORTS_CXX0X)
    MESSAGE(STATUS "Enable C++0x support")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
  ELSE()
    MESSAGE(WARNING "Compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
  ENDIF()
ENDIF()
