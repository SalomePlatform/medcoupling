
// Creates "int *argc, char ***argv" parameters from input list
%typemap(in) (int *argc, char ***argv) {
  int i;
  if (!PyList_Check($input)) {
    PyErr_SetString(PyExc_ValueError, "Expecting a list");
    return NULL;
  }
  int aSize = PyList_Size($input);
  $1 = &aSize;
  char** aStrs = (char **) malloc((aSize+1)*sizeof(char *));
  for (i = 0; i < aSize; i++) {
    PyObject *s = PyList_GetItem($input,i);
    if (!PyString_Check(s)) {
        free(aStrs);
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
    }
    aStrs[i] = PyString_AsString(s);
  }
  aStrs[i] = 0;
  $2 = &aStrs;
}

%typemap(freearg) (int *argc, char ***argv) {
   if ($2) free(*($2));
}

/*  MACRO: IN typemap for std::set<TYPE> C++ object */
%define TYPEMAP_INPUT_SET_BY_VALUE( TYPE )
{
  /* typemap in for set<TYPE> */
  /* Check if is a list */
  if (PyList_Check($input))
  {
    int size = PyList_Size($input);
    set< TYPE > tmpSet;

    for (int i=0; i < size; i++)
    {
      PyObject * tmp = PyList_GetItem($input,i);
      TYPE elem = PyInt_AsLong(tmp);
      tmpSet.insert(elem);
    }
    $1 = tmpSet;
  }
  else
  {
    PyErr_SetString(PyExc_TypeError,"not a list");
    return NULL;
  }
}
%enddef

%typemap(in) set<int>
{ 
  TYPEMAP_INPUT_SET_BY_VALUE( int ) 
}
%typecheck(SWIG_TYPECHECK_POINTER) set<int> {
  $1 = PyList_Check($input) ? 1 : 0;
}
